{"version":3,"sources":["../../../source/test/library/log-handler.test.js"],"names":["FileSystem","Path","Test","Log","Process","process","SymbolProperty","Symbol","AClass","constructor","name","createA","getPid","duration","Promise","resolve","setTimeout","pid","throwIt","error","callIt","_formatConstructorParameter","prototype","_formatParameter","_formatReturnValue","test","logPath","ensureDir","dirname","log","_AClass","createProxy","truthy","logContents","readAllJson","is","length","msg","remove","aClass","_aClass","only","throws","Error","notThrows","undefined","Date"],"mappings":"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","sourcesContent":["import { FileSystem } from '@virtualpatterns/mablung-file-system'\nimport Path from 'path'\nimport Test from 'ava'\n\nimport { Log/*, FormattedLog */ } from '../../index.js'\n\nconst Process = process\nconst SymbolProperty = Symbol('property')\n\nclass AClass {\n\n  constructor(name) {\n    this.name = name\n  }\n\n  createA(name) {\n    return new AClass(name)\n  }\n\n  [SymbolProperty]() { return 'property' }\n\n  getPid(duration = 0) {\n\n    if (duration) {\n  \n      return new Promise((resolve) => {\n  \n        setTimeout(() => {\n          /* c8 ignore next 1 */\n          resolve(Process.pid)\n        }, duration)\n  \n      })\n  \n    } else {\n      return Process.pid\n    }\n  \n  }\n\n  throwIt(error) {\n    throw error\n  }\n\n  callIt() {}\n\n}\n\nAClass._formatConstructorParameter = function _formatConstructorParameter(name) {\n  return [ {}, `name = '${name}'` ]\n}\n\nAClass.prototype.getPid._formatParameter = function _formatParameter(duration = 0) {\n  return [ {}, `duration = ${duration}` ]\n}\n\nAClass.prototype.getPid._formatReturnValue = function _formatReturnValue(pid) {\n  return [ {}, `AClass.getPid() = ${pid}` ]\n}\n\nTest('LogHandler.construct(target, parameter) using _formatConstructorParameter', async (test) => {\n\n  let logPath = 'process/log/log-handler-construct.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    let _AClass = log.createProxy(AClass)\n    \n    test.truthy(new _AClass('name'))\n  \n    let logContents = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n  \n    test.is(logContents.length, 2)\n    test.is(logContents[1].msg, '< new AClass(name = \\'name\\')')\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('LogHandler.get(target, propertyName, receiver) when propertyName is a symbol', async (test) => {\n\n  let logPath = 'process/log/log-handler-get-symbol.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    let aClass = new AClass()\n    let _aClass = log.createProxy(aClass)\n\n    test.is(_aClass[SymbolProperty](), 'property')\n  \n    let logContents = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n\n    test.is(logContents.length, 2)\n    test.is(logContents[1].msg, '< AClass.[property]() returned \\'property\\'')\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('LogHandler.get(target, propertyName, receiver) when propertyName is \\'_formatConstructorParameter\\'', async (test) => {\n\n  let logPath = 'process/log/log-handler-get-format-constructor-parameter.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    let _AClass = log.createProxy(AClass)\n\n    test.is(_AClass._formatConstructorParameter('name')[1], 'name = \\'name\\'')\n  \n    let logContents = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n\n    // calls to _formatConstructorParameter are not logged\n    test.is(logContents.length, 0)\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('LogHandler.get(target, propertyName, receiver) when propertyName is \\'_formatParameter\\'', async (test) => {\n\n  let logPath = 'process/log/log-handler-get-format-parameter.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    let aClass = new AClass()\n    let _aClass = log.createProxy(aClass)\n\n    test.is(_aClass.getPid._formatParameter(1000)[1], 'duration = 1000')\n  \n    let logContents = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n\n    // calls to _formatXParameter are not logged\n    test.is(logContents.length, 0)\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('LogHandler.get(target, propertyName, receiver) when propertyName is \\'_formatReturnValue\\'', async (test) => {\n\n  let logPath = 'process/log/log-handler-get-format-return-value.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    let aClass = new AClass()\n    let _aClass = log.createProxy(aClass)\n\n    test.is(_aClass.getPid._formatReturnValue(1000)[1], 'AClass.getPid() = 1000')\n  \n    let logContents = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n\n    // calls to _formatXReturnValue are not logged\n    test.is(logContents.length, 0)\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest.only('LogHandler.apply(target, self, parameter) when target fails', async (test) => {\n\n  let logPath = 'process/log/log-handler-apply-fails.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    let aClass = new AClass()\n    let _aClass = log.createProxy(aClass)\n\n    test.throws(() => { _aClass.throwIt(new Error('error')) }, { 'instanceOf': Error })\n  \n    let logContents = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n  \n    test.is(logContents.length, 2)\n    // test.is(logContents[1].data.message, 'error')\n  \n  } finally {\n    // await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('LogHandler.apply(target, self, parameter) when target returns a Promise', async (test) => {\n\n  let logPath = 'process/log/log-handler-apply-promise.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    let aClass = new AClass()\n    let _aClass = log.createProxy(aClass)\n\n    test.is(await _aClass.getPid(1000), Process.pid)\n  \n    let logContents = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n  \n    test.is(logContents.length, 2)\n    test.is(logContents[1].msg, `< AClass.getPid(duration = 1000) returned AClass.getPid() = ${Process.pid}`)\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('LogHandler.apply(target, self, parameter) when target takes a variety of arguments', async (test) => {\n\n  let logPath = 'process/log/log-handler-apply-variety.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    let aClass = new AClass()\n    let _aClass = log.createProxy(aClass)\n\n    test.notThrows(() => { _aClass.callIt(null, undefined, new Date(('1995-12-17T03:24:00')), /abc/i) })\n  \n    let logContents = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n  \n    test.is(logContents.length, 2)\n    test.is(logContents[1].msg, '< AClass.callIt(null, undefined, \\'1995.12.17-03:24:00.000-0500\\', /abc/i)')\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n"],"file":"log-handler.test.js"}
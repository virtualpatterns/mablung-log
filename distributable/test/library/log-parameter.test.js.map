{"version":3,"sources":["../../../source/test/library/log-parameter.test.js"],"names":["FileSystem","Stream","Test","Log","LogParameter","LogDestination","before","test","context","logPath","log","destination","option","getConstructorParameter","assert","deepEqual","path","stream","createWriteStream","Writable","Promise","resolve","reject","end","error","remove","after","always"],"mappings":"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","sourcesContent":["import { FileSystem } from '@virtualpatterns/mablung-file-system'\n// import Path from 'path'\nimport Stream from 'stream'\nimport Test from 'ava'\n\nimport { Log/*, FormattedLog */ } from '../../index.js'\nimport { LogParameter } from '../../library/log-parameter.js'\nimport { LogDestination } from '../../library/log-destination.js'\n\nTest.before(async (test) => {\n\n  test.context.logPath = 'process/log/log-parameter.log'\n  // await FileSystem.ensureDir(Path.dirname(test.context.logPath))\n\n  test.context.log = new Log(test.context.logPath, { 'level': 'trace' })\n\n})\n\nTest('LogParameter.getConstructorParameter(log)', (test) => {\n\n  let [ destination, option ] = LogParameter.getConstructorParameter(test.context.log)\n\n  test.assert(destination instanceof LogDestination)\n  test.deepEqual(option, {})\n\n})\n\nTest('LogParameter.getConstructorParameter(log, destination)', (test) => {\n\n  let [ destination, option ] = LogParameter.getConstructorParameter(test.context.log, new LogDestination())\n\n  test.assert(destination instanceof LogDestination)\n  test.deepEqual(option, {})\n\n})\n\nTest('LogParameter.getConstructorParameter(log, stream)', async (test) => {\n\n  let path = 'process/log/log-parameter-stream-writable.log'\n  let stream = FileSystem.createWriteStream(path, { 'encoding': 'utf8', 'flags': 'a+' })\n\n  try {\n\n    let [ destination, option ] = LogParameter.getConstructorParameter(test.context.log, stream)\n\n    test.assert(destination instanceof Stream.Writable)\n    test.deepEqual(option, {})\n  \n  } finally {\n\n    await new Promise((resolve, reject) => {\n      stream.end((error) => {\n        if (error) {\n          reject(error)\n        } else {\n          resolve()\n        }\n      })\n    })\n\n    await FileSystem.remove(path)\n\n  }\n\n})\n\nTest('LogParameter.getConstructorParameter(log, path)', async (test) => {\n\n  let path = 'process/log/log-parameter-string.log'\n  let [ destination, option ] = LogParameter.getConstructorParameter(test.context.log, path)\n\n  try {\n    test.assert(destination instanceof LogDestination)\n    test.deepEqual(option, {})\n  } finally {\n    await FileSystem.remove(path)\n  }\n\n})\n\nTest('LogParameter.getConstructorParameter(log, option)', (test) => {\n\n  let [ destination, option ] = LogParameter.getConstructorParameter(test.context.log, { 'abc': 123 })\n\n  test.assert(destination instanceof LogDestination)\n  test.deepEqual(option, { 'abc': 123 })\n\n})\n\nTest('LogParameter.getConstructorParameter(log, destination, option)', (test) => {\n\n  let [ destination, option ] = LogParameter.getConstructorParameter(test.context.log, new LogDestination(), { 'abc': 123 })\n\n  test.assert(destination instanceof LogDestination)\n  test.deepEqual(option, { 'abc': 123 })\n\n})\n\nTest('LogParameter.getConstructorParameter(log, stream, option)', async (test) => {\n\n  let path = 'process/log/log-parameter-stream-writable.log'\n  let stream = FileSystem.createWriteStream(path, { 'encoding': 'utf8', 'flags': 'a+' })\n\n  try {\n\n    let [ destination, option ] = LogParameter.getConstructorParameter(test.context.log, stream, { 'abc': 123 })\n\n    test.assert(destination instanceof Stream.Writable)\n    test.deepEqual(option, { 'abc': 123 })\n  \n  } finally {\n\n    await new Promise((resolve, reject) => {\n      stream.end((error) => {\n        if (error) {\n          reject(error)\n        } else {\n          resolve()\n        }\n      })\n    })\n\n    await FileSystem.remove(path)\n\n  }\n\n})\n\nTest('LogParameter.getConstructorParameter(log, path, option)', (test) => {\n\n  let [ destination, option ] = LogParameter.getConstructorParameter(test.context.log, 'process/log/log-parameter-string.log', { 'abc': 123 })\n\n  test.assert(destination instanceof LogDestination)\n  test.deepEqual(option, { 'abc': 123 })\n\n})\n\nTest.after.always(async (test) => {\n\n  delete test.context.log\n\n  await FileSystem.remove(test.context.logPath)\n  delete test.context.logPath\n\n})\n\n"],"file":"log-parameter.test.js"}
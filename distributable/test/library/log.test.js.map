{"version":3,"sources":["../../../source/test/library/log.test.js"],"names":["FileSystem","Path","Process","WorkerClient","Test","Log","LogAttachedError","LogDetachedError","Require","_createRequire","import","meta","url","test","logPath","ensureDir","dirname","log","trace","logContent","readAllJson","is","length","msg","remove","forEach","levelNumber","levelName","getLevelName","rootPath","workerLogPath","worker","writeTo","resolve","module","createLog","attach","end","Promise","all","pidPath","originalLogPath","renamedLogPath","createPidFile","move","signalPidFile","maximumDuration","pollInterval","whenExists","detach","destroyLog","deletePidFile","whenNotExists","throws","methodName","only","wait"],"mappings":"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","sourcesContent":["import { FileSystem } from '@virtualpatterns/mablung-file-system'\nimport Path from 'path'\nimport { Process } from '@virtualpatterns/mablung-process'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\nimport Test from 'ava'\n\nimport { Log, LogAttachedError, LogDetachedError } from '../../index.js'\n\nconst Require = __require\n\nTest('new Log(path, option)', async (test) => {\n\n  let logPath = 'process/log/log-constructor.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    log.trace('trace')\n\n    let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n  \n    test.is(logContent.length, 1)\n    test.is(logContent[0].msg, 'trace')\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('Log.getLevelName(levelNumber)', async (test) => {\n\n  let logPath = 'process/log/log-get-level-name.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    [\n      [10, 'trace'],\n      [20, 'debug'],\n      [30, 'info'],\n      [40, 'warn'],\n      [50, 'error'],\n      [60, 'fatal']\n    ].forEach(([levelNumber, levelName]) => {\n      test.is(log.getLevelName(levelNumber), levelName)\n    })\n\n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('Log.attach() on exit', async (test) => {\n\n  let rootPath = 'process/log'\n  await FileSystem.ensureDir(rootPath)\n\n  let workerLogPath = `${rootPath}/log-attach-on-exit-worker.log`\n  let logPath = `${rootPath}/log-attach-on-exit.log`\n\n  let worker = new WorkerClient()\n\n  try {\n\n    worker.writeTo(workerLogPath)\n\n    await worker.import(Require.resolve('./worker.js'))\n\n    await worker.module.createLog(logPath, { 'level': 'trace' })\n    await worker.module.attach()\n\n    await worker.end()\n\n    let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n\n    test.is(logContent.length, 3)\n\n    test.is(logContent[1].msg, 'Process.on(\\'exit\\', this._onExit = this.onImmediate((immediateLog) => { ... }))')\n    test.is(logContent[2].msg, 'Log.detach()')\n\n  } finally {\n\n    await Promise.all([\n      FileSystem.remove(workerLogPath),\n      FileSystem.remove(logPath)\n    ]) \n\n  }\n\n})\n\nTest('Log.attach() on SIGHUP', async (test) => {\n\n  let rootPath = 'process/log'\n  await FileSystem.ensureDir(rootPath)\n\n  let pidPath = 'process/pid/log-attach-on-sighup.pid'\n  await FileSystem.ensureDir(Path.dirname(pidPath))\n\n  let workerLogPath = `${rootPath}/log-attach-on-sighup-worker.log`\n  let originalLogPath = `${rootPath}/log-attach-on-sighup-original.log`\n  let renamedLogPath = `${rootPath}/log-attach-on-sighup-renamed.log`\n\n  let worker = new WorkerClient()\n\n  try {\n\n    worker.writeTo(workerLogPath)\n\n    await worker.import(Require.resolve('./worker.js'))\n    await worker.module.createPidFile(pidPath)\n\n    try {\n      \n      await worker.module.createLog(originalLogPath, { 'level': 'trace' })\n\n      try {\n\n        await worker.module.attach()\n\n        try {\n\n          await worker.module.trace('before SIGHUP')\n\n          await FileSystem.move(originalLogPath, renamedLogPath, { 'overwrite': true })\n    \n          Process.signalPidFile(pidPath, 'SIGHUP')\n\n          let maximumDuration = 1000\n          let pollInterval = maximumDuration / 4\n        \n          await FileSystem.whenExists(maximumDuration, pollInterval, originalLogPath)\n    \n          await worker.module.trace('after SIGHUP')\n\n          let logContent = null\n          logContent = await FileSystem.readAllJson(renamedLogPath, { 'encoding': 'utf-8' })\n  \n          test.is(logContent.length, 3)\n          test.is(logContent[1].msg, 'before SIGHUP')\n          test.is(logContent[2].msg, 'Process.on(\\'SIGHUP\\', this._onSIGHUP = () => { ... })')\n\n          logContent = await FileSystem.readAllJson(originalLogPath, { 'encoding': 'utf-8' })\n\n          test.is(logContent.length, 1)\n          test.is(logContent[0].msg, 'after SIGHUP')\n\n        } finally {\n          await worker.module.detach()\n        }\n  \n      } finally {\n        await worker.module.destroyLog()\n      }\n\n    } finally {\n      await worker.module.deletePidFile()\n    }\n\n  } finally {\n\n    await worker.end()\n\n    await Promise.all([\n      FileSystem.remove(workerLogPath),\n      FileSystem.remove(originalLogPath),\n      FileSystem.remove(renamedLogPath)\n    ]) \n\n  }\n\n})\n\nTest('Log.attach() on SIGINT', async (test) => {\n\n  let rootPath = 'process/log'\n  await FileSystem.ensureDir(rootPath)\n\n  let pidPath = 'process/pid/log-attach-on-sigint.pid'\n  await FileSystem.ensureDir(Path.dirname(pidPath))\n\n  let workerLogPath = `${rootPath}/log-attach-on-sigint-worker.log`\n  let logPath = `${rootPath}/log-attach-on-sigint.log`\n\n  let worker = new WorkerClient()\n\n  try {\n\n    worker.writeTo(workerLogPath)\n\n    await worker.import(Require.resolve('./worker.js'))\n\n    await worker.module.createPidFile(pidPath)\n    await worker.module.createLog(logPath, { 'level': 'trace' })\n    await worker.module.attach()\n    \n    Process.signalPidFile(pidPath, 'SIGINT')\n\n    let maximumDuration = 4000\n    let pollInterval = maximumDuration / 8\n  \n    await FileSystem.whenNotExists(maximumDuration, pollInterval, pidPath)\n\n    let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n\n    test.is(logContent.length, 3)\n\n    test.is(logContent[1].msg, 'Process.on(\\'SIGINT\\', this._onSIGINT = this.onImmediate((immediateLog) => { ... }))')\n    test.is(logContent[2].msg, 'Log.detach()')\n\n  } finally {\n\n    await Promise.all([\n      FileSystem.remove(workerLogPath),\n      FileSystem.remove(logPath)\n    ]) \n\n  }\n\n})\n\nTest('Log.attach() when called twice', async (test) => {\n\n  let logPath = 'process/log/log-attach-twice.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    log.attach()\n\n    test.throws(() => { log.attach() }, { 'instanceOf': LogAttachedError })\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('Log.detach()', async (test) => {\n\n  let rootPath = 'process/log'\n  await FileSystem.ensureDir(rootPath)\n\n  let pidPath = 'process/pid/log-detach.pid'\n  await FileSystem.ensureDir(Path.dirname(pidPath))\n\n  let workerLogPath = `${rootPath}/log-detach-worker.log`\n  let logPath = `${rootPath}/log-detach.log`\n\n  let worker = new WorkerClient()\n\n  try {\n\n    worker.writeTo(workerLogPath)\n\n    await worker.import(Require.resolve('./worker.js'))\n\n    await worker.module.createPidFile(pidPath)\n    await worker.module.createLog(logPath, { 'level': 'trace' })\n\n    await worker.module.attach()\n    await worker.module.detach()\n    \n    Process.signalPidFile(pidPath, 'SIGINT')\n\n    let maximumDuration = 4000\n    let pollInterval = maximumDuration / 8\n  \n    await FileSystem.whenNotExists(maximumDuration, pollInterval, pidPath)\n\n    let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n\n    test.is(logContent.length, 2)\n    test.is(logContent[1].msg, 'Log.detach()')\n\n  } finally {\n\n    await Promise.all([\n      FileSystem.remove(workerLogPath),\n      FileSystem.remove(logPath)\n    ]) \n\n  }\n\n})\n\nTest('Log.detach() when called twice', async (test) => {\n\n  let logPath = 'process/log/log-detach-twice.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    log.attach()\n    log.detach()\n\n    test.throws(() => { log.detach() }, { 'instanceOf': LogDetachedError })\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\n;[\n  // 'trace',\n  // 'debug',\n  // 'info',\n  'error'\n  // ,\n  // 'warn',\n  // 'fatal'\n].forEach((methodName) => {\n\n  Test.only(`Log.${methodName}('${methodName}')`, async (test) => {\n\n    let logPath = `process/log/log-${methodName}.log`\n    await FileSystem.ensureDir(Path.dirname(logPath))\n\n    let log = new Log(logPath, { 'level': methodName })\n\n    try {\n\n      log[methodName](methodName)\n\n      await Process.wait(1000)\n\n      let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n    \n      test.is(logContent.length, 1)\n      test.is(logContent[0].msg, methodName)\n    \n    } finally {\n      // await FileSystem.remove(logPath)\n    }\n\n  })\n\n})\n"],"file":"log.test.js"}
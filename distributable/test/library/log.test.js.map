{"version":3,"sources":["../../../source/test/library/log.test.js"],"names":["FileSystem","Path","Process","WorkerClient","Test","Log","LogAttachedError","LogDetachedError","Require","_createRequire","import","meta","url","test","logPath","ensureDir","dirname","log","trace","logContent","readAllJson","is","length","msg","remove","forEach","levelNumber","levelName","getLevelName","only","rootPath","workerLogPath","worker","resolve","writeTo","module","createLog","attach","exit","Promise","all","pidPath","originalLogPath","renamedLogPath","createPidFile","move","signalPidFile","maximumDuration","pollInterval","whenExists","detach","destroyLog","deletePidFile","whenNotExists","throws","methodName","wait"],"mappings":"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","sourcesContent":["import { FileSystem } from '@virtualpatterns/mablung-file-system'\nimport Path from 'path'\nimport { Process } from '@virtualpatterns/mablung-process'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\nimport Test from 'ava'\n\nimport { Log, LogAttachedError, LogDetachedError } from '../../index.js'\n\nconst Require = __require\n\nTest('new Log(path, option)', async (test) => {\n\n  let logPath = 'process/log/log-constructor.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    log.trace('trace')\n\n    let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n  \n    test.is(logContent.length, 1)\n    test.is(logContent[0].msg, 'trace')\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('Log.getLevelName(levelNumber)', async (test) => {\n\n  let logPath = 'process/log/log-get-level-name.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    [\n      [10, 'trace'],\n      [20, 'debug'],\n      [30, 'info'],\n      [40, 'warn'],\n      [50, 'error'],\n      [60, 'fatal']\n    ].forEach(([levelNumber, levelName]) => {\n      test.is(log.getLevelName(levelNumber), levelName)\n    })\n\n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest.only('Log.attach() on exit', async (test) => {\n\n  let rootPath = 'process/log'\n  await FileSystem.ensureDir(rootPath)\n\n  let workerLogPath = `${rootPath}/log-attach-on-exit-worker.log`\n  let logPath = `${rootPath}/log-attach-on-exit.log`\n\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    worker.writeTo(workerLogPath)\n\n    await worker.module.createLog(logPath, { 'level': 'trace' })\n    await worker.module.attach()\n\n    await worker.exit()\n\n    let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n\n    test.is(logContent.length, 3)\n\n    test.is(logContent[1].msg, 'Process.on(\\'exit\\', this.__onExit = this.onImmediate((immediateLog) => { ... }))')\n    test.is(logContent[2].msg, 'Log.detach()')\n\n  } finally {\n\n    await Promise.all([\n      FileSystem.remove(workerLogPath),\n      FileSystem.remove(logPath)\n    ]) \n\n  }\n\n})\n\nTest('Log.attach() on SIGHUP', async (test) => {\n\n  let rootPath = 'process/log'\n  await FileSystem.ensureDir(rootPath)\n\n  let pidPath = 'process/pid/log-attach-on-sighup.pid'\n  await FileSystem.ensureDir(Path.dirname(pidPath))\n\n  let workerLogPath = `${rootPath}/log-attach-on-sighup-worker.log`\n  let originalLogPath = `${rootPath}/log-attach-on-sighup-original.log`\n  let renamedLogPath = `${rootPath}/log-attach-on-sighup-renamed.log`\n\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    worker.writeTo(workerLogPath)\n\n    await worker.module.createPidFile(pidPath)\n\n    try {\n      \n      await worker.module.createLog(originalLogPath, { 'level': 'trace' })\n\n      try {\n\n        await worker.module.attach()\n\n        try {\n\n          await worker.module.trace('before SIGHUP')\n\n          await FileSystem.move(originalLogPath, renamedLogPath, { 'overwrite': true })\n    \n          Process.signalPidFile(pidPath, 'SIGHUP')\n\n          let maximumDuration = 1000\n          let pollInterval = maximumDuration / 4\n        \n          await FileSystem.whenExists(maximumDuration, pollInterval, originalLogPath)\n    \n          await worker.module.trace('after SIGHUP')\n\n          let logContent = null\n          logContent = await FileSystem.readAllJson(renamedLogPath, { 'encoding': 'utf-8' })\n  \n          test.is(logContent.length, 3)\n          test.is(logContent[1].msg, 'before SIGHUP')\n          test.is(logContent[2].msg, 'Process.on(\\'SIGHUP\\', this.__onSIGHUP = () => { ... })')\n\n          logContent = await FileSystem.readAllJson(originalLogPath, { 'encoding': 'utf-8' })\n\n          test.is(logContent.length, 1)\n          test.is(logContent[0].msg, 'after SIGHUP')\n\n        } finally {\n          await worker.module.detach()\n        }\n  \n      } finally {\n        await worker.module.destroyLog()\n      }\n\n    } finally {\n      await worker.module.deletePidFile()\n    }\n\n  } finally {\n\n    await worker.exit()\n\n    await Promise.all([\n      FileSystem.remove(workerLogPath),\n      FileSystem.remove(originalLogPath),\n      FileSystem.remove(renamedLogPath)\n    ]) \n\n  }\n\n})\n\nTest.only('Log.attach() on SIGINT', async (test) => {\n\n  let rootPath = 'process/log'\n  await FileSystem.ensureDir(rootPath)\n\n  let pidPath = 'process/pid/log-attach-on-sigint.pid'\n  await FileSystem.ensureDir(Path.dirname(pidPath))\n\n  let workerLogPath = `${rootPath}/log-attach-on-sigint-worker.log`\n  let logPath = `${rootPath}/log-attach-on-sigint.log`\n\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    worker.writeTo(workerLogPath)\n\n    await worker.module.createPidFile(pidPath)\n    await worker.module.createLog(logPath, { 'level': 'trace' })\n    await worker.module.attach()\n    \n    Process.signalPidFile(pidPath, 'SIGINT')\n\n    let maximumDuration = 4000\n    let pollInterval = maximumDuration / 8\n  \n    await FileSystem.whenNotExists(maximumDuration, pollInterval, pidPath)\n\n    let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n\n    test.is(logContent.length, 3)\n\n    test.is(logContent[1].msg, 'Process.on(\\'SIGINT\\', this.__onSIGINT = this.onImmediate((immediateLog) => { ... }))')\n    test.is(logContent[2].msg, 'Log.detach()')\n\n  } finally {\n\n    await Promise.all([\n      FileSystem.remove(workerLogPath),\n      FileSystem.remove(logPath)\n    ]) \n\n  }\n\n})\n\nTest('Log.attach() when called twice', async (test) => {\n\n  let logPath = 'process/log/log-attach-twice.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    log.attach()\n\n    test.throws(() => { log.attach() }, { 'instanceOf': LogAttachedError })\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('Log.detach()', async (test) => {\n\n  let rootPath = 'process/log'\n  await FileSystem.ensureDir(rootPath)\n\n  let pidPath = 'process/pid/log-detach.pid'\n  await FileSystem.ensureDir(Path.dirname(pidPath))\n\n  let workerLogPath = `${rootPath}/log-detach-worker.log`\n  let logPath = `${rootPath}/log-detach.log`\n\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    worker.writeTo(workerLogPath)\n\n    await worker.module.createPidFile(pidPath)\n    await worker.module.createLog(logPath, { 'level': 'trace' })\n\n    await worker.module.attach()\n    await worker.module.detach()\n    \n    Process.signalPidFile(pidPath, 'SIGINT')\n\n    let maximumDuration = 4000\n    let pollInterval = maximumDuration / 8\n  \n    await FileSystem.whenNotExists(maximumDuration, pollInterval, pidPath)\n\n    let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n\n    test.is(logContent.length, 2)\n    test.is(logContent[1].msg, 'Log.detach()')\n\n  } finally {\n\n    await Promise.all([\n      FileSystem.remove(workerLogPath),\n      FileSystem.remove(logPath)\n    ]) \n\n  }\n\n})\n\nTest('Log.detach() when called twice', async (test) => {\n\n  let logPath = 'process/log/log-detach-twice.log'\n  await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    log.attach()\n    log.detach()\n\n    test.throws(() => { log.detach() }, { 'instanceOf': LogDetachedError })\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\n;[\n  'trace',\n  'debug',\n  'info',\n  'error',\n  'warn',\n  'fatal'\n].forEach((methodName) => {\n\n  Test(`Log.${methodName}('${methodName}')`, async (test) => {\n\n    let logPath = `process/log/log-${methodName}.log`\n    await FileSystem.ensureDir(Path.dirname(logPath))\n\n    let log = new Log(logPath, { 'level': methodName })\n\n    try {\n\n      log[methodName](methodName)\n\n      await Process.wait(1000)\n\n      let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n    \n      test.is(logContent.length, 1)\n      test.is(logContent[0].msg, methodName)\n    \n    } finally {\n      await FileSystem.remove(logPath)\n    }\n\n  })\n\n})\n"],"file":"log.test.js"}
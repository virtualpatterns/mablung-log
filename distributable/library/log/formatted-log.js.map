{"version":3,"sources":["../../../source/library/log/formatted-log.js"],"names":["Clone","Configuration","Luxon","Utilities","Is","Log","DateTime","MILLISECONDS_PER_NANOSECOND","FormattedLog","constructor","parameter","defaultOption","nestedKey","getPrettifier","bind","merge","prettifierOption","option","data","format","nestedData","time","hostname","pid","level","messageKey","v","string","formatDateTime","formatComputerName","formatLevelName","message","duration","formatDuration","stack","not","emptyObject","formatInspect","inspect","dateTime","fromMillis","toFormat","longName","pattern","match","null","exec","shortName","levelNumber","getLevelName","toUpperCase","padStart","durationInNanoseconds"],"mappings":"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","sourcesContent":["import Clone from 'clone'\nimport { Configuration } from '@virtualpatterns/mablung-configuration'\nimport Luxon from 'luxon'\nimport Utilities from 'util'\nimport Is from '@pwn/is'\n\nimport { Log } from '../log.js'\n\nconst { DateTime } = Luxon\n\nconst MILLISECONDS_PER_NANOSECOND = 1000000\n\nclass FormattedLog extends Log {\n\n  constructor(...parameter) {\n    super(...parameter)\n  }\n\n  get defaultOption() {\n\n    let defaultOption = { \n      'prettyPrint': { \n        'inspect': { \n          'depth': null, \n          'maxArrayLength': null, \n          'showHidden': true \n        },\n        'nestedKey': super.defaultOption.nestedKey\n      }, \n      'prettifier': this.getPrettifier.bind(this) \n    }\n\n    return Configuration.merge(super.defaultOption, defaultOption)\n\n  }\n\n  getPrettifier(prettifierOption) {\n    // return this.format.bind(this, prettifierOption)\n    return (function (option, data) { return this.format(data, option) }).bind(this, prettifierOption)\n  }\n\n  format(data, option) {\n\n    let nestedData = null\n\n    if (option.nestedKey) {\n      nestedData = data[option.nestedKey] || {}\n    } else {\n\n      nestedData = Clone(data)\n\n      delete nestedData.time\n      delete nestedData.hostname\n      delete nestedData.pid\n      delete nestedData.level\n      delete nestedData[option.messageKey || 'msg']\n      delete nestedData.v\n\n    }\n\n    let string = ''\n    string += Utilities.format(\n      '%s %s %s %s %s%s',\n      this.formatDateTime(data.time),\n      this.formatComputerName(data.hostname),\n      data.pid,\n      this.formatLevelName(data.level),\n      data[option.messageKey || 'msg'] || nestedData.message || '',\n      nestedData.duration ? ` in ${this.formatDuration(nestedData.duration)}` : '')\n\n    if (nestedData.stack) {\n      string += `\\n\\n${nestedData.stack}\\n\\n`\n    } else {\n      \n      delete nestedData.duration\n\n      if (Is.not.emptyObject(nestedData)) {\n        string += `\\n\\n${this.formatInspect(nestedData, option.inspect)}\\n\\n`\n      }\n      else {\n        string += '\\n'\n      }\n\n    }\n\n    return string\n  \n  }\n\n  formatDateTime(dateTime) {\n    return DateTime.fromMillis(dateTime).toFormat('yyyy.LL.dd-HH:mm:ss.SSSZZZ')\n  }\n\n  formatComputerName(longName) {\n\n    let pattern = /^(.+)\\./i\n    let match = null\n\n    if (Is.not.null(match = pattern.exec(longName))) {\n      let [ , shortName ] = match\n      return shortName\n    }\n\n    return longName\n\n  }\n  \n  formatLevelName(levelNumber) {\n    return this.getLevelName(levelNumber).toUpperCase().padStart(5)\n  }\n\n  formatDuration(durationInNanoseconds) {\n    return `${durationInNanoseconds / MILLISECONDS_PER_NANOSECOND}ms`\n  }\n\n  formatInspect(data, option) {\n    return Utilities.inspect(data, option)\n  }\n\n}\n\nexport { FormattedLog }\n"],"file":"formatted-log.js"}
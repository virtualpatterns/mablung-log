{"version":3,"sources":["../../source/sandbox/p.js"],"names":["FileSystem","Path","ShortFormattedLog","main","Base","constructor","b","doBaseInstance","console","log","Aristocrat","a","doAristocratInstance","doAristocratStatic","logPath","ensureDir","dirname","createProxy","error"],"mappings":"AAAA,OAAO,qDAAP;AACA,SAASA,UAAT,QAA2B,sCAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,SAASC,iBAAT,QAAkC,aAAlC;;AAEA,eAAeC,IAAf,GAAsB;;AAEpB,MAAI;;AAEF,UAAMC,IAAN,CAAW;;AAETC,MAAAA,WAAW,GAAG;AACZ,aAAKC,CAAL,GAAS,YAAT;AACD;;AAEDC,MAAAA,cAAc,GAAG;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,CAAjB;AACD,OARQ;;;;AAYX,UAAMI,UAAN,SAAyBN,IAAzB,CAA8B;;AAE5BC,MAAAA,WAAW,GAAG;AACZ;AACA,aAAKM,CAAL,GAAS,YAAT;AACD;;AAEDJ,MAAAA,cAAc,GAAG;AACf,cAAMA,cAAN;AACD;;AAEDK,MAAAA,oBAAoB,GAAG;AACrBJ,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKE,CAAjB;AACD;;AAEwB,aAAlBE,kBAAkB,GAAG;AAC1BL,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKE,CAAjB;AACD,OAjB2B;;;;AAqB9BD,IAAAA,UAAU,CAACC,CAAX,GAAe,UAAf;;AAEA,QAAIG,OAAO,GAAG,4BAAd;AACA,UAAMd,UAAU,CAACe,SAAX,CAAqBd,IAAI,CAACe,OAAL,CAAaF,OAAb,CAArB,CAAN;;AAEA,QAAIL,GAAG,GAAG,IAAIP,iBAAJ,CAAsBY,OAAtB,EAA+B,EAAE,SAAS,OAAX,EAA/B,CAAV;;AAEA,QAAIH,CAAC,GAAG,IAAID,UAAJ,EAAR;AACAC,IAAAA,CAAC,GAAGF,GAAG,CAACQ,WAAJ,CAAgBN,CAAhB,CAAJ;;AAEAA,IAAAA,CAAC,CAACJ,cAAF;AACA;;AAED,GAhDD,CAgDE,OAAOW,KAAP,EAAc;AACdV,IAAAA,OAAO,CAACU,KAAR,CAAcA,KAAd;AACD;;AAEF;;AAEDf,IAAI","sourcesContent":["import '@virtualpatterns/mablung-source-map-support/install'\nimport { FileSystem } from '@virtualpatterns/mablung-file-system'\nimport Path from 'path'\n\nimport { ShortFormattedLog } from '../index.js'\n\nasync function main() {\n\n  try {\n\n    class Base {\n\n      constructor() {\n        this.b = 'instance b'\n      }\n\n      doBaseInstance() {\n        console.log(this.b)\n      }\n\n    }\n\n    class Aristocrat extends Base {\n\n      constructor() {\n        super()\n        this.a = 'instance a'\n      }\n\n      doBaseInstance() {\n        super.doBaseInstance()\n      }\n\n      doAristocratInstance() {\n        console.log(this.a)\n      }\n\n      static doAristocratStatic() {\n        console.log(this.a)\n      }\n\n    }\n\n    Aristocrat.a = 'static a'\n\n    let logPath = 'process/log/aristocrat.log'\n    await FileSystem.ensureDir(Path.dirname(logPath))\n  \n    let log = new ShortFormattedLog(logPath, { 'level': 'trace' })\n\n    let a = new Aristocrat()\n    a = log.createProxy(a)\n\n    a.doBaseInstance()\n    // a.doAristocratInstance()\n\n  } catch (error) {\n    console.error(error)\n  }\n\n}\n\nmain()"],"file":"p.js"}
{"version":3,"sources":["../../../source/test/library/log.test.js"],"names":["FileSystem","Is","Process","WorkerClient","Test","Log","LogAttachedError","LogDetachedError","Require","_createRequire","import","meta","url","test","logPath","log","trace","logContent","readAllJson","is","length","msg","remove","forEach","levelNumber","levelName","getLevelName","rootPath","workerLogPath","worker","resolve","writeTo","module","createLog","attach","exit","Promise","all","pidPath","createPidFile","windows","throwsAsync","Error","signalPidFile","maximumDuration","pollInterval","whenNotExists","originalLogPath","renamedLogPath","move","whenExists","detach","destroyLog","deletePidFile","throws","methodName","wait"],"mappings":"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","sourcesContent":["import { FileSystem } from '@virtualpatterns/mablung-file-system'\nimport { Is } from '@virtualpatterns/mablung-is'\n// import Path from 'path'\nimport { Process } from '@virtualpatterns/mablung-process'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\nimport Test from 'ava'\n\nimport { Log, LogAttachedError, LogDetachedError } from '../../index.js'\n\nconst Require = __require\n\nTest('new Log(path, option)', async (test) => {\n\n  let logPath = 'process/log/log-constructor.log'\n  // await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    log.trace('trace')\n\n    let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n  \n    test.is(logContent.length, 1)\n    test.is(logContent[0].msg, 'trace')\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('Log.getLevelName(levelNumber)', async (test) => {\n\n  let logPath = 'process/log/log-get-level-name.log'\n  // await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    [\n      [10, 'trace'],\n      [20, 'debug'],\n      [30, 'info'],\n      [40, 'warn'],\n      [50, 'error'],\n      [60, 'fatal']\n    ].forEach(([levelNumber, levelName]) => {\n      test.is(log.getLevelName(levelNumber), levelName)\n    })\n\n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('Log.attach() on exit', async (test) => {\n\n  let rootPath = 'process/log'\n  // await FileSystem.ensureDir(rootPath)\n\n  let workerLogPath = `${rootPath}/log-attach-on-exit-worker.log`\n  let logPath = `${rootPath}/log-attach-on-exit.log`\n\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    worker.writeTo(workerLogPath)\n\n    await worker.module.createLog(logPath, { 'level': 'trace' })\n    await worker.module.attach({ 'handleExit': true, 'handleKillSignal': false, 'handleRotate': false })\n\n    await worker.exit()\n\n    let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n\n    test.is(logContent.length, 3)\n\n    test.is(logContent[1].msg, 'Process.on(\\'exit\\', this.__onExit = this.onImmediate((immediateLog) => { ... }))')\n    test.is(logContent[2].msg, 'Log.detach()')\n\n  } finally {\n\n    await Promise.all([\n      FileSystem.remove(workerLogPath),\n      FileSystem.remove(logPath)\n    ]) \n\n  }\n\n})\n\nTest('Log.attach() on SIGINT optionally throws LogOptionNotSupportedError', async (test) => {\n\n  let rootPath = 'process/log'\n  // await FileSystem.ensureDir(rootPath)\n\n  let pidPath = 'process/pid/log-attach-on-sigint.pid'\n  // await FileSystem.ensureDir(Path.dirname(pidPath))\n\n  let workerLogPath = `${rootPath}/log-attach-on-sigint-worker.log`\n  let logPath = `${rootPath}/log-attach-on-sigint.log`\n\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    worker.writeTo(workerLogPath)\n\n    await worker.module.createPidFile(pidPath)\n    await worker.module.createLog(logPath, { 'level': 'trace' })\n\n    if (Is.windows()) {\n\n      try {\n        await test.throwsAsync(worker.module.attach({ 'handleExit': false, 'handleKillSignal': [ 'SIGINT' ], 'handleRotate': false }), { 'instanceOf': Error })\n      } finally {\n        await worker.exit()\n      }\n\n    } else {\n\n      await worker.module.attach({ 'handleExit': false, 'handleKillSignal': [ 'SIGINT' ], 'handleRotate': false })\n    \n      Process.signalPidFile(pidPath, 'SIGINT')\n  \n      let maximumDuration = 5000\n      let pollInterval = maximumDuration / 8\n    \n      await FileSystem.whenNotExists(maximumDuration, pollInterval, pidPath)\n  \n      let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n  \n      test.is(logContent.length, 3)\n  \n      test.is(logContent[1].msg, 'Process.on(\\'SIGINT\\', this.__onSIGINT = this.onImmediate((immediateLog) => { ... }))')\n      test.is(logContent[2].msg, 'Log.detach()')\n  \n    }\n\n  } finally {\n\n    await Promise.all([\n      FileSystem.remove(workerLogPath),\n      FileSystem.remove(logPath)\n    ]) \n\n  }\n\n})\n\nTest('Log.attach() on SIGHUP optionally throws LogOptionNotSupportedError', async (test) => {\n\n  let rootPath = 'process/log'\n  // await FileSystem.ensureDir(rootPath)\n\n  let pidPath = 'process/pid/log-attach-on-sighup.pid'\n  // await FileSystem.ensureDir(Path.dirname(pidPath))\n\n  let workerLogPath = `${rootPath}/log-attach-on-sighup-worker.log`\n  let originalLogPath = `${rootPath}/log-attach-on-sighup-original.log`\n  let renamedLogPath = `${rootPath}/log-attach-on-sighup-renamed.log`\n\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    worker.writeTo(workerLogPath)\n\n    await worker.module.createPidFile(pidPath)\n\n    try {\n      \n      await worker.module.createLog(originalLogPath, { 'level': 'trace' })\n    \n      try {\n\n        if (Is.windows()) {\n          await test.throwsAsync(worker.module.attach({ 'handleExit': false, 'handleKillSignal': false, 'handleRotate': [ 'SIGHUP' ] }), { 'instanceOf': Error })\n        } else {\n    \n          await worker.module.attach({ 'handleExit': false, 'handleKillSignal': false, 'handleRotate': [ 'SIGHUP' ] })\n\n          try {\n  \n            await worker.module.trace('before SIGHUP')\n  \n            await FileSystem.move(originalLogPath, renamedLogPath, { 'overwrite': true })\n      \n            Process.signalPidFile(pidPath, 'SIGHUP')\n  \n            let maximumDuration = 1000\n            let pollInterval = maximumDuration / 4\n          \n            await FileSystem.whenExists(maximumDuration, pollInterval, originalLogPath)\n      \n            await worker.module.trace('after SIGHUP')\n  \n            let logContent = null\n            logContent = await FileSystem.readAllJson(renamedLogPath, { 'encoding': 'utf-8' })\n    \n            test.is(logContent.length, 3)\n            test.is(logContent[1].msg, 'before SIGHUP')\n            test.is(logContent[2].msg, 'Process.on(\\'SIGHUP\\', this.__onSIGHUP = () => { ... })')\n  \n            logContent = await FileSystem.readAllJson(originalLogPath, { 'encoding': 'utf-8' })\n  \n            test.is(logContent.length, 1)\n            test.is(logContent[0].msg, 'after SIGHUP')\n  \n          } finally {\n            await worker.module.detach()\n          }\n      \n        }\n  \n      } finally {\n        await worker.module.destroyLog()\n      }\n\n    } finally {\n      await worker.module.deletePidFile()\n    }\n\n  } finally {\n\n    await worker.exit()\n\n    await Promise.all([\n      FileSystem.remove(workerLogPath),\n      FileSystem.remove(originalLogPath),\n      FileSystem.remove(renamedLogPath)\n    ]) \n\n  }\n\n})\n\nTest('Log.attach() when called twice', async (test) => {\n\n  let logPath = 'process/log/log-attach-twice.log'\n  // await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    log.attach()\n\n    test.throws(() => { log.attach() }, { 'instanceOf': LogAttachedError })\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\nTest('Log.detach() on exit', async (test) => {\n\n  let rootPath = 'process/log'\n  // await FileSystem.ensureDir(rootPath)\n\n  let workerLogPath = `${rootPath}/log-detach-worker.log`\n  let logPath = `${rootPath}/log-detach.log`\n\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    worker.writeTo(workerLogPath)\n\n    await worker.module.createLog(logPath, { 'level': 'trace' })\n\n    await worker.module.attach()\n    await worker.module.detach()\n\n    await worker.exit()\n\n    let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n\n    test.is(logContent.length, 2)\n    test.is(logContent[1].msg, 'Log.detach()')\n\n  } finally {\n\n    await Promise.all([\n      FileSystem.remove(workerLogPath),\n      FileSystem.remove(logPath)\n    ]) \n\n  }\n\n})\n\nTest('Log.detach() when called twice', async (test) => {\n\n  let logPath = 'process/log/log-detach-twice.log'\n  // await FileSystem.ensureDir(Path.dirname(logPath))\n\n  let log = new Log(logPath, { 'level': 'trace' })\n\n  try {\n\n    log.attach()\n    log.detach()\n\n    test.throws(() => { log.detach() }, { 'instanceOf': LogDetachedError })\n  \n  } finally {\n    await FileSystem.remove(logPath)\n  }\n\n})\n\n;[\n  'trace',\n  'debug',\n  'info',\n  'error',\n  'warn',\n  'fatal'\n].forEach((methodName) => {\n\n  Test(`Log.${methodName}('${methodName}')`, async (test) => {\n\n    let logPath = `process/log/log-${methodName}.log`\n    // await FileSystem.ensureDir(Path.dirname(logPath))\n\n    let log = new Log(logPath, { 'level': methodName })\n\n    try {\n\n      log[methodName](methodName)\n\n      await Process.wait(1000)\n\n      let logContent = await FileSystem.readAllJson(logPath, { 'encoding': 'utf-8' })\n    \n      test.is(logContent.length, 1)\n      test.is(logContent[0].msg, methodName)\n    \n    } finally {\n      await FileSystem.remove(logPath)\n    }\n\n  })\n\n})\n"],"file":"log.test.js"}